(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{152:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),u=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=u(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||p[d]||o;return n?a.a.createElement(m,l(l({ref:t},c),{},{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(152)),i={id:"digital-ocean",title:"Install On Digital Ocean"},l={unversionedId:"installation/digital-ocean",id:"installation/digital-ocean",isDocsHomePage:!1,title:"Install On Digital Ocean",description:"Digital Ocean is a cloud infrastructure provider",source:"@site/docs/installation/digital-ocean.md",slug:"/installation/digital-ocean",permalink:"/installation/digital-ocean",version:"current",sidebar:"someSidebar",previous:{title:"Install On Minikube",permalink:"/installation/minikube"},next:{title:"Command Line Interface (CLI)",permalink:"/features/cli"}},s=[{value:"Create your Kubernetes Cluster on Digital Ocean",id:"create-your-kubernetes-cluster-on-digital-ocean",children:[]},{value:"Install Cert Manager",id:"install-cert-manager",children:[]},{value:"Install Argo Workflow",id:"install-argo-workflow",children:[]},{value:"Install KintoHub",id:"install-kintohub",children:[]},{value:"Access KintoHub",id:"access-kintohub",children:[]}],c={toc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://www.digitalocean.com/"},"Digital Ocean")," is a cloud infrastructure provider\nwhich provides also ",Object(o.b)("a",{parentName:"p",href:"https://www.digitalocean.com/products/kubernetes/"},"managed Kubernetes cluster services"),".\nYou can install KintoHub on Digital Ocean start with the cheapest tier (single node with 1GB of memory without LoadBalancer)."),Object(o.b)("h2",{id:"create-your-kubernetes-cluster-on-digital-ocean"},"Create your Kubernetes Cluster on Digital Ocean"),Object(o.b)("p",null,"Visit the ",Object(o.b)("a",{parentName:"p",href:"https://www.digitalocean.com/docs/kubernetes/quickstart/"},"Digital Ocean documentation")," to create a Kubernetes cluster.",Object(o.b)("br",{parentName:"p"}),"\n","Once everything is setup you should be able to access the Kubernetes cluster with ",Object(o.b)("inlineCode",{parentName:"p"},"kubectl"),"."),Object(o.b)("h2",{id:"install-cert-manager"},"Install Cert Manager"),Object(o.b)("p",null,"Install Cert Manager from our ",Object(o.b)("a",{parentName:"p",href:"./installation#install-cert-manager"},"installation guide")," if you require auto TLS certificate for your exposed services."),Object(o.b)("h2",{id:"install-argo-workflow"},"Install Argo Workflow"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"kubectl create namespace argo\nhelm repo add argo https://argoproj.github.io/argo-helm\nhelm upgrade --install argo \\\n    --version 0.16.6 \\\n    --set installCRD=true \\\n    --set singleNamespace=false \\\n    --set useDefaultArtifactRepo=true \\\n    --set artifactRepository.archiveLogs=true \\\n    --set artifactRepository.s3.accessKeySecret.name=kinto-minio \\\n    --set artifactRepository.s3.accessKeySecret.key=accesskey \\\n    --set artifactRepository.s3.secretKeySecret.name=kinto-minio \\\n    --set artifactRepository.s3.secretKeySecret.key=secretkey \\\n    --set artifactRepository.s3.insecure=true \\\n    --set artifactRepository.s3.bucket=argo-artifacts \\\n    --set artifactRepository.s3.endpoint=kinto-minio:9000 \\\n    --set artifactRepository.minio.install=false \\\n    --set controller.containerRuntimeExecutor=kubelet \\\n    --namespace argo argo/argo\n")),Object(o.b)("p",null,"It is similar to our ",Object(o.b)("a",{parentName:"p",href:"/installation/installation#install-argo-workflow"},"installation guide")," to install ",Object(o.b)("a",{parentName:"p",href:"https://argoproj.github.io/projects/argo/"},"Argo Workflow"),",\nexcept we need to have the flag ",Object(o.b)("inlineCode",{parentName:"p"},"--set controller.containerRuntimeExecutor=kubelet")," on, since Digital Ocean is using the latest Kubernetes version (1.20+)."),Object(o.b)("h2",{id:"install-kintohub"},"Install KintoHub"),Object(o.b)("p",null,"The installation is identical to ",Object(o.b)("a",{parentName:"p",href:"/installation/installation#install-kintohub"},"installation guide")," or\n",Object(o.b)("a",{parentName:"p",href:"/installation/advanced-installation#install-kintohub"},"advanced installation guide"),".\nFor the example below, it will create a secured dashboard with token authentication, exposing everything publicly,\nand everything services deployed are secured with TLS. (* This will create a Load Balancer which charges $10 per month)"),Object(o.b)("p",null,"Change the values inside the curly braces and run"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"kubectl create ns kintohub\nhelm repo add kintohub https://kintoproj.github.io/kinto-helm\nhelm upgrade --install kinto \\\n  --set common.domainName={your_domain} \\\n  --set common.ssl.enabled=true \\\n  --set common.ssl.issuer.email={ssl_issuer_email} \\\n  --set common.ssl.issuer.solver.cloudflare.email={cloudflare_account_email} \\\n  --set common.ssl.issuer.solver.cloudflare.cloudflareApiToken={cloudflare_api_token} \\\n  --set minio.resources.requests.memory=null \\\n  --set minio.makeBucketJob.resources.requests.memory=null \\\n  --set builder.env.IMAGE_REGISTRY_HOST={registry_host} \\\n  --set builder.workflow.docker.registry={docker_registry_fqdn} \\\n  --set builder.workflow.docker.email={docker_registry_email} \\\n  --set builder.workflow.docker.username={docker_registry_account_username} \\\n  --set builder.workflow.docker.password={docker_registry_account_password} \\\n  --set nginx-ingress-controller.service.type=LoadBalancer \\\n  --set core.ingress.enabled=true \\\n  --set core.secretKey={dashboard_secret}\n  --set dashboard.ingress.enabled=true \\\n  --namespace kintohub kintohub/kinto\n")),Object(o.b)("p",null,"Check the variables ",Object(o.b)("a",{parentName:"p",href:"/installation/advanced-installation#variables"},"here"),"."),Object(o.b)("p",null,"Once the installation completed, you should run also the command below from the prompt."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"Notes: if NetworkPolicies are enabled on your cluster, you need 'whitelist' the kintohub namespaces so that they can access your environments.\nRun `kubectl get networkpolicies`. If it does not error, that means that NetworkPolicies are enabled.\nIf enabled, run `kubectl label ns kube-system argo cert-manager kintohub owner=kintohub --overwrite`.\n\n> kubectl label ns kube-system argo cert-manager kintohub owner=kintohub --overwrite\n")),Object(o.b)("p",null,"This is because Digital Ocean by default enabled the network policy for your cluster.\nAll of your services deployed will be unaccessible if you fail to run the line above."),Object(o.b)("h2",{id:"access-kintohub"},"Access KintoHub"),Object(o.b)("p",null,"Port forward kinto core and kinto dashboard"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"kubectl port-forward svc/kinto-core 8090 -n kintohub\n\nkubectl port-forward svc/kinto-dashboard 5000 -n kintohub\n")),Object(o.b)("p",null,"Open ",Object(o.b)("a",{parentName:"p",href:"http://localhost:5000"},"localhost:5000"),"."))}u.isMDXComponent=!0}}]);